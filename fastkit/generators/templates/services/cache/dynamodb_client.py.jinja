"""DynamoDB cache client."""

import json
import logging
import time
from typing import Any, Optional
import boto3
from botocore.exceptions import ClientError
from app.core.config import settings

logger = logging.getLogger(__name__)


class DynamoDBClient:
    """DynamoDB cache client."""

    def __init__(self):
        """Initialize DynamoDB client."""
        session = boto3.Session(
            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
            region_name=settings.AWS_REGION
        )
        self.dynamodb = session.resource('dynamodb')
        self.table = self.dynamodb.Table(settings.DYNAMODB_TABLE_NAME)

    async def get(self, key: str) -> Optional[Any]:
        """Get value from cache."""
        try:
            response = self.table.get_item(Key={'cache_key': key})

            if 'Item' not in response:
                return None

            item = response['Item']

            # Check if item has expired
            if 'expires_at' in item and item['expires_at'] < int(time.time()):
                # Item has expired, delete it
                await self.delete(key)
                return None

            return json.loads(item['value'])
        except ClientError as e:
            logger.error(f"Error getting key {key} from DynamoDB: {e}")
            return None

    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """Set value in cache."""
        try:
            ttl = ttl or settings.CACHE_TTL
            expires_at = int(time.time()) + ttl
            serialized_value = json.dumps(value, default=str)

            self.table.put_item(
                Item={
                    'cache_key': key,
                    'value': serialized_value,
                    'expires_at': expires_at
                }
            )
            return True
        except ClientError as e:
            logger.error(f"Error setting key {key} in DynamoDB: {e}")
            return False

    async def delete(self, key: str) -> bool:
        """Delete key from cache."""
        try:
            self.table.delete_item(Key={'cache_key': key})
            return True
        except ClientError as e:
            logger.error(f"Error deleting key {key} from DynamoDB: {e}")
            return False

    async def exists(self, key: str) -> bool:
        """Check if key exists in cache."""
        try:
            response = self.table.get_item(Key={'cache_key': key})

            if 'Item' not in response:
                return False

            item = response['Item']

            # Check if item has expired
            if 'expires_at' in item and item['expires_at'] < int(time.time()):
                # Item has expired, delete it
                await self.delete(key)
                return False

            return True
        except ClientError as e:
            logger.error(f"Error checking key {key} in DynamoDB: {e}")
            return False

    async def clear(self) -> bool:
        """Clear all cache."""
        try:
            # DynamoDB doesn't have a direct way to clear all items
            # This is a simplified implementation - in production, consider using scan and batch delete
            logger.warning(
                "DynamoDB clear operation is not implemented for safety reasons")
            return False
        except Exception as e:
            logger.error(f"Error clearing DynamoDB cache: {e}")
            return False


# Global cache client instance
cache_client = DynamoDBClient()
