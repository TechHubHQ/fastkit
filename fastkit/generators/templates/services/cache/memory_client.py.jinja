"""In-memory cache client."""

import logging
import time
from typing import Any, Optional
from cachetools import TTLCache
from app.core.config import settings

logger = logging.getLogger(__name__)


class InMemoryClient:
    """In-memory cache client using TTLCache."""

    def __init__(self):
        """Initialize in-memory cache."""
        self.cache = TTLCache(
            maxsize=settings.CACHE_MAX_SIZE,
            ttl=settings.CACHE_TTL
        )

    async def get(self, key: str) -> Optional[Any]:
        """Get value from cache."""
        try:
            return self.cache.get(key)
        except Exception as e:
            logger.error(f"Error getting key {key} from memory cache: {e}")
            return None

    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """Set value in cache."""
        try:
            if ttl and ttl != settings.CACHE_TTL:
                # For custom TTL, we need to create a new cache entry with expiration time
                # This is a simplified approach - in production, consider using a more sophisticated solution
                expiry_time = time.time() + ttl
                self.cache[key] = {'value': value, 'expires_at': expiry_time}
            else:
                self.cache[key] = value
            return True
        except Exception as e:
            logger.error(f"Error setting key {key} in memory cache: {e}")
            return False

    async def delete(self, key: str) -> bool:
        """Delete key from cache."""
        try:
            if key in self.cache:
                del self.cache[key]
                return True
            return False
        except Exception as e:
            logger.error(f"Error deleting key {key} from memory cache: {e}")
            return False

    async def exists(self, key: str) -> bool:
        """Check if key exists in cache."""
        try:
            return key in self.cache
        except Exception as e:
            logger.error(f"Error checking key {key} in memory cache: {e}")
            return False

    async def clear(self) -> bool:
        """Clear all cache."""
        try:
            self.cache.clear()
            return True
        except Exception as e:
            logger.error(f"Error clearing memory cache: {e}")
            return False


# Global cache client instance
cache_client = InMemoryClient()
