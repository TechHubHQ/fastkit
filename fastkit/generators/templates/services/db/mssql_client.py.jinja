"""Microsoft SQL Server database client."""

from sqlalchemy.orm import Session
from .base import Base, engine, SessionLocal
from .session import db_manager


class MSSQLClient:
    """Microsoft SQL Server database client."""

    def __init__(self):
        self.engine = engine
        self.SessionLocal = SessionLocal
        self.Base = Base
        self.manager = db_manager

    def get_session(self) -> Session:
        """Get a database session."""
        return self.SessionLocal()

    def create_tables(self):
        """Create all database tables."""
        self.Base.metadata.create_all(bind=self.engine)

    def drop_tables(self):
        """Drop all database tables."""
        self.Base.metadata.drop_all(bind=self.engine)

    def get_connection(self):
        """Get a raw database connection."""
        return self.engine.connect()

    def execute_raw_sql(self, sql: str, params: dict = None):
        """Execute raw SQL query."""
        with self.engine.connect() as conn:
            return conn.execute(sql, params or {})

    def check_connection(self) -> bool:
        """Check if database connection is working."""
        try:
            with self.engine.connect() as conn:
                conn.execute("SELECT 1")
            return True
        except Exception:
            return False

    def get_database_info(self):
        """Get SQL Server database information."""
        with self.engine.connect() as conn:
            result = conn.execute("SELECT @@VERSION")
            return result.fetchone()[0]

    def get_table_sizes(self):
        """Get sizes of all tables in the database."""
        with self.engine.connect() as conn:
            result = conn.execute("""
                SELECT 
                    t.NAME AS TableName,
                    s.Name AS SchemaName,
                    p.rows AS RowCounts,
                    SUM(a.total_pages) * 8 AS TotalSpaceKB, 
                    SUM(a.used_pages) * 8 AS UsedSpaceKB, 
                    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB
                FROM 
                    sys.tables t
                INNER JOIN      
                    sys.indexes i ON t.OBJECT_ID = i.object_id
                INNER JOIN 
                    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
                INNER JOIN 
                    sys.allocation_units a ON p.partition_id = a.container_id
                LEFT OUTER JOIN 
                    sys.schemas s ON t.schema_id = s.schema_id
                WHERE 
                    t.NAME NOT LIKE 'dt%' 
                    AND t.is_ms_shipped = 0
                    AND i.OBJECT_ID > 255 
                GROUP BY 
                    t.Name, s.Name, p.Rows
                ORDER BY 
                    TotalSpaceKB DESC
            """)
            return result.fetchall()

    def update_statistics(self, table_name: str = None):
        """Update statistics for a table or all tables."""
        with self.engine.connect() as conn:
            if table_name:
                conn.execute(f"UPDATE STATISTICS {table_name}")
            else:
                conn.execute("EXEC sp_updatestats")

    def rebuild_index(self, table_name: str, index_name: str = None):
        """Rebuild an index or all indexes on a table."""
        with self.engine.connect() as conn:
            if index_name:
                conn.execute(f"ALTER INDEX {index_name} ON {table_name} REBUILD")
            else:
                conn.execute(f"ALTER INDEX ALL ON {table_name} REBUILD")


# Global database client instance
db_client = MSSQLClient()