"""Celery-based job scheduler."""

import logging
from typing import Any, Callable, Dict, Optional
from celery import Celery
from celery.schedules import crontab
from app.core.config import settings

logger = logging.getLogger(__name__)


class CeleryScheduler:
    """Celery job scheduler."""

    def __init__(self):
        """Initialize Celery scheduler."""
        self.app = Celery(
            "{{ project_name }}_jobs",
            broker=getattr(settings, 'CELERY_BROKER_URL',
                           'redis://localhost:6379/0'),
            backend=getattr(settings, 'CELERY_RESULT_BACKEND',
                            'redis://localhost:6379/0'),
            include=['app.jobs.tasks']
        )

        # Configure Celery
        self.app.conf.update(
            task_serializer='json',
            accept_content=['json'],
            result_serializer='json',
            timezone='UTC',
            enable_utc=True,
            task_track_started=True,
            task_time_limit=30 * 60,  # 30 minutes
            task_soft_time_limit=25 * 60,  # 25 minutes
            worker_prefetch_multiplier=1,
            worker_max_tasks_per_child=1000,
        )

        self._tasks = {}

    def task(self,
             name: Optional[str] = None,
             schedule: Optional[Dict[str, Any]] = None,
             **kwargs):
        """Decorator to register a task."""
        def decorator(func: Callable):
            task_name = name or f"{func.__module__}.{func.__name__}"

            # Register with Celery
            celery_task = self.app.task(name=task_name, **kwargs)(func)

            # Store task info
            self._tasks[task_name] = {
                'func': func,
                'celery_task': celery_task,
                'schedule': schedule,
                'name': task_name
            }

            # Add to beat schedule if schedule is provided
            if schedule:
                self._add_to_beat_schedule(task_name, schedule)

            return celery_task

        return decorator

    def _add_to_beat_schedule(self, task_name: str, schedule: Dict[str, Any]):
        """Add task to Celery beat schedule."""
        if not hasattr(self.app.conf, 'beat_schedule'):
            self.app.conf.beat_schedule = {}

        schedule_config = self._parse_schedule(schedule)
        self.app.conf.beat_schedule[task_name] = {
            'task': task_name,
            **schedule_config
        }

    def _parse_schedule(self, schedule: Dict[str, Any]) -> Dict[str, Any]:
        """Parse schedule configuration."""
        schedule_type = schedule.get('type', 'interval')

        if schedule_type == 'cron':
            return {
                'schedule': crontab(
                    minute=schedule.get('minute', '*'),
                    hour=schedule.get('hour', '*'),
                    day_of_week=schedule.get('day_of_week', '*'),
                    day_of_month=schedule.get('day_of_month', '*'),
                    month_of_year=schedule.get('month_of_year', '*'),
                )
            }
        elif schedule_type == 'interval':
            return {
                'schedule': schedule.get('seconds', 60)
            }
        else:
            raise ValueError(f"Unsupported schedule type: {schedule_type}")

    def run_task(self, task_name: str, *args, **kwargs):
        """Run a task immediately."""
        if task_name in self._tasks:
            return self._tasks[task_name]['celery_task'].delay(*args, **kwargs)
        else:
            raise ValueError(f"Task {task_name} not found")

    def schedule_task(self, task_name: str, eta=None, countdown=None, *args, **kwargs):
        """Schedule a task to run at a specific time."""
        if task_name in self._tasks:
            return self._tasks[task_name]['celery_task'].apply_async(
                args=args, kwargs=kwargs, eta=eta, countdown=countdown
            )
        else:
            raise ValueError(f"Task {task_name} not found")

    def get_task_status(self, task_id: str):
        """Get the status of a task."""
        return self.app.AsyncResult(task_id)

    def list_tasks(self):
        """List all registered tasks."""
        return list(self._tasks.keys())

    def start_worker(self, **kwargs):
        """Start Celery worker."""
        logger.info("Starting Celery worker...")
        self.app.worker_main(['worker', '--loglevel=info'] +
                             [f'--{k}={v}' for k, v in kwargs.items()])

    def start_beat(self, **kwargs):
        """Start Celery beat scheduler."""
        logger.info("Starting Celery beat scheduler...")
        self.app.start(['beat', '--loglevel=info'] +
                       [f'--{k}={v}' for k, v in kwargs.items()])


# Global scheduler instance
scheduler = CeleryScheduler()

# Task decorator shortcut
task = scheduler.task
