"""
API Gateway routing configuration.
This file handles routing requests to appropriate microservices.
"""
import httpx
from fastapi import APIRouter, HTTPException
from typing import Dict, Any

router = APIRouter()

# Service endpoints configuration
SERVICE_ENDPOINTS = {
{% for service in services %}
    "{{ service }}": "http://{{ service }}:8000",
{% endfor %}
}


async def forward_request(service_name: str, path: str, method: str, **kwargs) -> Dict[str, Any]:
    """Forward request to the appropriate microservice."""
    if service_name not in SERVICE_ENDPOINTS:
        raise HTTPException(status_code=404, detail=f"Service {service_name} not found")

    service_url = SERVICE_ENDPOINTS[service_name]
    url = f"{service_url}{path}"

    async with httpx.AsyncClient() as client:
        response = await client.request(method, url, **kwargs)
        return response.json()


{% for service in services %}
@router.api_route("/{{ service }}/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def {{ service.replace('-', '_') }}_proxy(path: str, request):
    """Proxy requests to {{ service }} service."""
    method = request.method
    return await forward_request("{{ service }}", f"/{path}", method)

{% endfor %}

@router.get("/health")
async def gateway_health():
    """Health check endpoint for the API Gateway."""
    return {"status": "healthy", "service": "api-gateway"}