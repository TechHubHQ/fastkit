"""MongoDB database client."""

from motor.motor_asyncio import AsyncIOMotorClient
from .session import db_manager


class MongoDBClient:
    """MongoDB database client."""

    def __init__(self):
        self.manager = db_manager

    async def connect(self):
        """Connect to MongoDB."""
        await self.manager.connect()

    async def disconnect(self):
        """Disconnect from MongoDB."""
        await self.manager.disconnect()

    def get_collection(self, collection_name: str):
        """Get a collection."""
        return self.manager.get_collection(collection_name)

    async def create_collection(self, collection_name: str):
        """Create a new collection."""
        return await self.manager.database.create_collection(collection_name)

    async def drop_collection(self, collection_name: str):
        """Drop a collection."""
        return await self.manager.database.drop_collection(collection_name)

    async def list_collections(self):
        """List all collections."""
        return await self.manager.database.list_collection_names()

    async def check_connection(self) -> bool:
        """Check if database connection is working."""
        try:
            await self.manager.client.admin.command('ping')
            return True
        except Exception:
            return False

    async def create_index(self, collection_name: str, index_spec, **kwargs):
        """Create an index on a collection."""
        collection = self.get_collection(collection_name)
        return await collection.create_index(index_spec, **kwargs)

    async def get_database_stats(self):
        """Get database statistics."""
        return await self.manager.database.command("dbStats")


# Global database client instance
db_client = MongoDBClient()
