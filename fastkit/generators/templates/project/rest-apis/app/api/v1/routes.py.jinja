"""
API v1 routes.
This module contains all the API endpoints for version 1.
"""
from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any

from app.utils.logger import get_logger

logger = get_logger(__name__)
router = APIRouter()


@router.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint for API v1."""
    return {"message": "Welcome to the API v1"}


@router.get("/items")
async def get_items() -> List[Dict[str, Any]]:
    """Get all items."""
    # This is a placeholder - replace with actual business logic
    logger.info("Fetching all items")
    return [
        {"id": 1, "name": "Item 1", "description": "First item"},
        {"id": 2, "name": "Item 2", "description": "Second item"},
    ]


@router.get("/items/{item_id}")
async def get_item(item_id: int) -> Dict[str, Any]:
    """Get a specific item by ID."""
    logger.info(f"Fetching item with ID: {item_id}")
    
    # This is a placeholder - replace with actual business logic
    if item_id <= 0:
        raise HTTPException(status_code=400, detail="Invalid item ID")
    
    if item_id > 100:  # Simulate item not found
        raise HTTPException(status_code=404, detail="Item not found")
    
    return {
        "id": item_id,
        "name": f"Item {item_id}",
        "description": f"Description for item {item_id}"
    }


@router.post("/items")
async def create_item(item_data: Dict[str, Any]) -> Dict[str, Any]:
    """Create a new item."""
    logger.info(f"Creating new item: {item_data}")
    
    # This is a placeholder - replace with actual business logic
    # You should use Pydantic models for request/response validation
    
    return {
        "id": 123,  # This would be generated by your database
        "message": "Item created successfully",
        "data": item_data
    }