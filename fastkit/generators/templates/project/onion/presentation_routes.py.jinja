"""
Presentation layer API routes for onion architecture.
This file contains the API endpoints that interact with the application layer.
"""
from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any
from dependency_injector.wiring import Provide, inject

from src.container import Container
# from src.application.use_cases.user_use_cases import UserUseCases

router = APIRouter()


@router.get("/")
async def root() -> Dict[str, str]:
    """Root endpoint."""
    return {"message": "Welcome to the Onion Architecture API"}


# Example endpoint using dependency injection
# @router.get("/users")
# @inject
# async def get_users(
#     user_use_cases: UserUseCases = Depends(Provide[Container.user_use_cases])
# ) -> List[Dict[str, Any]]:
#     """Get all users."""
#     return await user_use_cases.get_all_users()


# @router.get("/users/{user_id}")
# @inject
# async def get_user(
#     user_id: int,
#     user_use_cases: UserUseCases = Depends(Provide[Container.user_use_cases])
# ) -> Dict[str, Any]:
#     """Get a specific user by ID."""
#     user = await user_use_cases.get_user_by_id(user_id)
#     if not user:
#         raise HTTPException(status_code=404, detail="User not found")
#     return user


# @router.post("/users")
# @inject
# async def create_user(
#     user_data: Dict[str, Any],  # Replace with proper Pydantic model
#     user_use_cases: UserUseCases = Depends(Provide[Container.user_use_cases])
# ) -> Dict[str, Any]:
#     """Create a new user."""
#     return await user_use_cases.create_user(user_data)
