"""
Dependency injection container for the application.
This file configures all dependencies using the dependency-injector library.
"""
from dependency_injector import containers, providers
from dependency_injector.wiring import Provide, inject

# Import your repositories, services, and use cases here
# from src.infrastructure.repositories.user_repository import UserRepository
# from src.application.use_cases.user_use_cases import UserUseCases


class Container(containers.DeclarativeContainer):
    """Dependency injection container."""

    # Configuration
    config = providers.Configuration()

    # Database
    # database = providers.Singleton(
    #     Database,
    #     url=config.database.url
    # )

    # Repositories
    # user_repository = providers.Factory(
    #     UserRepository,
    #     session=database.provided.session
    # )

    # Use Cases
    # user_use_cases = providers.Factory(
    #     UserUseCases,
    #     user_repository=user_repository
    # )

    # Services
    # Add your application services here

    pass  # Remove this when you add actual dependencies


# Example of how to use dependency injection in your routes:
# @inject
# async def get_users(
#     user_use_cases: UserUseCases = Provide[Container.user_use_cases]
# ):
#     return await user_use_cases.get_all_users()