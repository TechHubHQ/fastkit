"""{{ domain_name.title() }} domain services."""

from typing import List
from .repositories import {{ domain_name.title() }}Repository
from .schemas import {{ domain_name.title() }}Create, {{ domain_name.title() }}Update, {{ domain_name.title() }}Response
from .exceptions import {{ domain_name.title() }}NotFound, {{ domain_name.title() }}AlreadyExists


class {{ domain_name.title() }}Service:
    """Service for {{ domain_name.lower() }} business logic."""

    def __init__(self, repository: {{ domain_name.title() }}Repository):
        self.repository = repository

    def get_{{ domain_name.lower() }}(self, {{ domain_name.lower() }}_id: int) -> {{ domain_name.title() }}Response:
        """Get a {{ domain_name.lower() }} by ID."""
        {{ domain_name.lower() }} = self.repository.get({{ domain_name.lower() }}_id)
        if not {{ domain_name.lower() }}:
            raise {{ domain_name.title() }}NotFound(f"{{ domain_name.title() }} with id {{ '{' }}{{ domain_name.lower() }}_id{{ '}' }} not found")
        return {{ domain_name.title() }}Response.model_validate({{ domain_name.lower() }})

    def get_all_{{ domain_name.lower() }}(self, skip: int = 0, limit: int = 100) -> List[{{ domain_name.title() }}Response]:
        """Get all {{ domain_name.lower() }} records with pagination."""
        {{ domain_name.lower() }}_list = self.repository.get_all(skip=skip, limit=limit)
        return [{{ domain_name.title() }}Response.model_validate({{ domain_name.lower() }}) for {{ domain_name.lower() }} in {{ domain_name.lower() }}_list]

    def create_{{ domain_name.lower() }}(self, {{ domain_name.lower() }}_data: {{ domain_name.title() }}Create) -> {{ domain_name.title() }}Response:
        """Create a new {{ domain_name.lower() }}."""
        existing_{{ domain_name.lower() }} = self.repository.get_by_name({{ domain_name.lower() }}_data.name)
        if existing_{{ domain_name.lower() }}:
            raise {{ domain_name.title() }}AlreadyExists(f"{{ domain_name.title() }} with name already exists")

        {{ domain_name.lower() }} = self.repository.create({{ domain_name.lower() }}_data)
        return {{ domain_name.title() }}Response.model_validate({{ domain_name.lower() }})

    def update_{{ domain_name.lower() }}(self, {{ domain_name.lower() }}_id: int, {{ domain_name.lower() }}_data: {{ domain_name.title() }}Update) -> {{ domain_name.title() }}Response:
        """Update a {{ domain_name.lower() }}."""
        {{ domain_name.lower() }} = self.repository.update({{ domain_name.lower() }}_id, {{ domain_name.lower() }}_data)
        if not {{ domain_name.lower() }}:
            raise {{ domain_name.title() }}NotFound(f"{{ domain_name.title() }} with id {{ '{' }}{{ domain_name.lower() }}_id{{ '}' }} not found")
        return {{ domain_name.title() }}Response.model_validate({{ domain_name.lower() }})

    def delete_{{ domain_name.lower() }}(self, {{ domain_name.lower() }}_id: int) -> bool:
        """Delete a {{ domain_name.lower() }}."""
        success = self.repository.delete({{ domain_name.lower() }}_id)
        if not success:
            raise {{ domain_name.title() }}NotFound(f"{{ domain_name.title() }} with id {{ '{' }}{{ domain_name.lower() }}_id{{ '}' }} not found")
        return success
