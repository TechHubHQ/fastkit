"""{{ domain_name.title() }} domain models."""

from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime
from bson import ObjectId


class {{ domain_name.title() }}(BaseModel):
    """{{ domain_name.title() }} model."""

    id: Optional[str] = Field(default_factory=lambda: str(ObjectId()), alias="_id")
    name: str = Field(..., description="Name of the {{ domain_name.lower() }}")
    description: Optional[str] = Field(None, description="Description of the {{ domain_name.lower() }}")
    is_active: bool = Field(True, description="Whether the {{ domain_name.lower() }} is active")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Creation timestamp")
    updated_at: Optional[datetime] = Field(None, description="Last update timestamp")

    class Config:
        populate_by_name = True
        json_encoders = {ObjectId: str}
        json_schema_extra = {
            "example": {
                "name": "Sample {{ domain_name.title() }}",
                "description": "A sample {{ domain_name.lower() }}",
                "is_active": True
            }
        }

    def __repr__(self):
        return f"<{{ domain_name.title() }}(id={self.id}, name='{self.name}')>"

    def to_dict(self) -> dict:
        """Convert model to dictionary for MongoDB operations."""
        data = self.model_dump(by_alias=True, exclude_unset=True)
        if self.updated_at:
            data["updated_at"] = self.updated_at
        return data

    @classmethod
    def from_dict(cls, data: dict) -> "{{ domain_name.title() }}":
        """Create model instance from MongoDB document."""
        if "_id" in data:
            data["_id"] = str(data["_id"])
        return cls(**data)