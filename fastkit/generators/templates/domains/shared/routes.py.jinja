"""{{ domain_name.title() }} domain routes."""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List
from .services import {{ domain_name.title() }}Service
from .schemas import {{ domain_name.title() }}Create, {{ domain_name.title() }}Update, {{ domain_name.title() }}Response
from .dependencies import get_{{ domain_name.lower() }}_service
from .exceptions import {{ domain_name.title() }}NotFound, {{ domain_name.title() }}AlreadyExists

router = APIRouter(prefix="/{{ domain_name.lower() }}", tags=["{{ domain_name.lower() }}"])


@router.get("/", response_model=List[{{ domain_name.title() }}Response])
def get_all_{{ domain_name.lower() }}(
    skip: int = Query(0, ge=0, description="Number of records to skip"),
    limit: int = Query(100, ge=1, le=1000, description="Number of records to return"),
    service: {{ domain_name.title() }}Service = Depends(get_{{ domain_name.lower() }}_service)
):
    """Get all {{ domain_name.lower() }} records with pagination."""
    return service.get_all_{{ domain_name.lower() }}(skip=skip, limit=limit)


@router.get("/{{ '{' }}{{ domain_name.lower() }}_id{{ '}' }}", response_model={{ domain_name.title() }}Response)
def get_{{ domain_name.lower() }}(
    {{ domain_name.lower() }}_id: int,
    service: {{ domain_name.title() }}Service = Depends(get_{{ domain_name.lower() }}_service)
):
    """Get a {{ domain_name.lower() }} by ID."""
    try:
        return service.get_{{ domain_name.lower() }}({{ domain_name.lower() }}_id)
    except {{ domain_name.title() }}NotFound as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))


@router.post("/create", response_model={{ domain_name.title() }}Response, status_code=status.HTTP_201_CREATED)
def create_{{ domain_name.lower() }}(
    {{ domain_name.lower() }}_data: {{ domain_name.title() }}Create,
    service: {{ domain_name.title() }}Service = Depends(get_{{ domain_name.lower() }}_service)
):
    """Create a new {{ domain_name.lower() }}."""
    try:
        return service.create_{{ domain_name.lower() }}({{ domain_name.lower() }}_data)
    except {{ domain_name.title() }}AlreadyExists as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))


@router.put("/{{ '{' }}{{ domain_name.lower() }}_id{{ '}' }}", response_model={{ domain_name.title() }}Response)
def update_{{ domain_name.lower() }}(
    {{ domain_name.lower() }}_id: int,
    {{ domain_name.lower() }}_data: {{ domain_name.title() }}Update,
    service: {{ domain_name.title() }}Service = Depends(get_{{ domain_name.lower() }}_service)
):
    """Update a {{ domain_name.lower() }}."""
    try:
        return service.update_{{ domain_name.lower() }}({{ domain_name.lower() }}_id, {{ domain_name.lower() }}_data)
    except {{ domain_name.title() }}NotFound as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))
    except {{ domain_name.title() }}AlreadyExists as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))


@router.delete("/{{ '{' }}{{ domain_name.lower() }}_id{{ '}' }}", status_code=status.HTTP_204_NO_CONTENT)
def delete_{{ domain_name.lower() }}(
    {{ domain_name.lower() }}_id: int,
    service: {{ domain_name.title() }}Service = Depends(get_{{ domain_name.lower() }}_service)
):
    """Delete a {{ domain_name.lower() }}."""
    try:
        service.delete_{{ domain_name.lower() }}({{ domain_name.lower() }}_id)
    except {{ domain_name.title() }}NotFound as e:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=str(e))