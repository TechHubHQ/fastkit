from pathlib import Path
from typing import Literal


AuthType = Literal["none", "jwt", "oauth"]
DbType = Literal["none", "postgresql", "sqlite", "mysql", "mongodb", "mssql"]
CacheType = Literal["none", "redis"]


def _ensure_dir(path: Path) -> None:
    path.mkdir(parents=True, exist_ok=True)


def scaffold_project_structure(
    *,
    base_path: Path,
    project_name: str,
    auth_type: AuthType = "none",
    db_choice: DbType = "none",
    cache_choice: CacheType = "none",
) -> None:
    """Create a best-practice FastAPI project directory structure.

    This function only creates directories and minimal placeholder files.
    No integrations are configured; we merely reflect the user's selections
    in the structure.
    """

    app_root = base_path
    src_app = app_root / "app"
    api_dir = src_app / "api"
    v1_dir = api_dir / "v1"
    core_dir = src_app / "core"
    models_dir = src_app / "models"
    services_dir = src_app / "services"
    repositories_dir = src_app / "repositories"
    db_dir = src_app / "db"
    auth_dir = src_app / "auth"
    cache_dir = src_app / "cache"
    tests_dir = app_root / "tests"
    infra_dir = app_root / "infra"

    # Base directories (single-root layout)
    for d in [
        app_root,
        src_app,
        api_dir,
        v1_dir,
        core_dir,
        models_dir,
        services_dir,
        repositories_dir,
        tests_dir,
        infra_dir,
    ]:
        _ensure_dir(d)

    # Optional/auth
    if auth_type != "none":
        _ensure_dir(auth_dir)
        (auth_dir / "__init__.py").write_text("")
        (auth_dir / "routes.py").write_text("# Placeholder for auth routes\n")

    # Optional/db
    if db_choice != "none":
        _ensure_dir(db_dir)
        (db_dir / "__init__.py").write_text("")
        (db_dir / "session.py").write_text("# Placeholder for DB session setup\n")

    # Optional/cache
    if cache_choice != "none":
        _ensure_dir(cache_dir)
        (cache_dir / "__init__.py").write_text("")
        (cache_dir / "client.py").write_text("# Placeholder for cache client setup\n")

    # Minimal files for app
    (src_app / "__init__.py").write_text("")
    (src_app / "main.py").write_text(
        """
from fastapi import FastAPI


def get_application() -> FastAPI:
    app = FastAPI(title="{title}")
    return app


app = get_application()
""".strip().format(title=project_name)
    )

    (core_dir / "__init__.py").write_text("")
    (core_dir / "config.py").write_text("# Placeholder for settings/config\n")

    (api_dir / "__init__.py").write_text("")
    (v1_dir / "__init__.py").write_text("")
    (v1_dir / "routes.py").write_text("# Placeholder for API v1 routes\n")

    (models_dir / "__init__.py").write_text("")
    (services_dir / "__init__.py").write_text("")
    (repositories_dir / "__init__.py").write_text("")

    # Tests & infra placeholders
    (tests_dir / "__init__.py").write_text("")
    (infra_dir / ".gitkeep").write_text("")

    # UV/pyproject setup and top-level files
    (app_root / "pyproject.toml").write_text(
        f"""
[project]
name = "{project_name}"
version = "0.1.0"
description = "A FastAPI service generated by FastKit"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.116",
    "uvicorn[standard]>=0.30",
]

[tool.uv]
index-url = "https://pypi.org/simple"
""".strip()
    )

    (app_root / "README.md").write_text(
        f"""\
# {project_name}

Generated with FastKit. Quick start with uv:

```bash
uv venv
source .venv/bin/activate  # on Windows: .venv\\Scripts\\activate
uv pip install -e .
uvicorn app.main:app --reload
```
"""
    )

    (app_root / ".gitignore").write_text(
        """
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Virtual environments
.venv/

# Distribution / packaging
build/
dist/
*.egg-info/

# OS files
.DS_Store
Thumbs.db
""".lstrip()
    )
